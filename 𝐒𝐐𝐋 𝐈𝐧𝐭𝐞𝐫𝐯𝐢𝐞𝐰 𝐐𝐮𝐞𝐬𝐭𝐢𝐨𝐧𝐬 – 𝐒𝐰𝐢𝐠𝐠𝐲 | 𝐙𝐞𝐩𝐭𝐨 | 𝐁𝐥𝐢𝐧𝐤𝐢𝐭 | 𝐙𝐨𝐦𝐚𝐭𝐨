                                                           🍴 𝐒𝐐𝐋 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬 – 𝐒𝐰𝐢𝐠𝐠𝐲 | 𝐙𝐞𝐩𝐭𝐨 | 𝐁𝐥𝐢𝐧𝐤𝐢𝐭 | 𝐙𝐨𝐦𝐚𝐭𝐨

## 📌 𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝟏)
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐒𝐚𝐥𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐝𝐚𝐢𝐥𝐲 𝐬𝐚𝐥𝐞𝐬 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐚 𝐬𝐭𝐨𝐫𝐞. 
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 
𝐭𝐡𝐞 𝟕-𝐝𝐚𝐲 𝐦𝐨𝐯𝐢𝐧𝐠 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐨𝐟 𝐬𝐚𝐥𝐞𝐬.
*/

# 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Sales (
    sale_date DATE,
    sales_amount INT
);

# 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Sales (sale_date, sales_amount) VALUES
('2025-09-01', 1000),('2025-09-02', 1200),
('2025-09-03', 900),('2025-09-04', 1500),
('2025-09-05', 1700),('2025-09-06', 1600),
('2025-09-07', 1800),('2025-09-08', 2000),
('2025-09-09', 1900),('2025-09-10', 2100),
('2025-09-11', 2200),('2025-09-12', 2300),
('2025-09-13', 2500),('2025-09-14', 2400),
('2025-09-15', 2600),('2025-09-16', 2700),
('2025-09-17', 2800),('2025-09-18', 3000),
('2025-09-19', 3100),('2025-09-20', 3200);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
---------------------------------------------
|  𝐬𝐚𝐥𝐞𝐬_𝐝𝐚𝐭𝐞  | 𝐬𝐚𝐥𝐞𝐬_𝐚𝐦𝐨𝐮𝐧𝐭 | 𝐦𝐨𝐯𝐢𝐧𝐠_𝐚𝐯𝐠   |
|---------------|--------------|------------|
| 2025-09-01    | 1000         | 1000       |
| 2025-09-02    | 1200         | 1100       |
| 2025-09-03    | 900          | 1033       |
| 2025-09-04    | 1500         | 1150       |
| 2025-09-05    | 1700         | 1260       |
| 2025-09-06    | 1600         | 1316       |
| 2025-09-07    | 1800         | 1385       |
| 2025-09-08    | 2000         | 1528       |
| 2025-09-09    | 1900         | 1628       |
| 2025-09-10    | 2100         | 1800       |
| 2025-09-11    | 2200         | 1900       |
| 2025-09-12    | 2300         | 1985       |
| 2025-09-13    | 2500         | 2114       |
| 2025-09-14    | 2400         | 2200       |
| 2025-09-15    | 2600         | 2285       |
| 2025-09-16    | 2700         | 2400       |
| 2025-09-17    | 2800         | 2500       |
| 2025-09-18    | 3000         | 2614       |
| 2025-09-19    | 3100         | 2728       |
| 2025-09-20    | 3200         | 2828       |
---------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝟐)
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐇𝐨𝐮𝐫𝐬 𝐭𝐡𝐚𝐭 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐡𝐨𝐮𝐫𝐬 
𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐨𝐫𝐤𝐞𝐝 𝐞𝐚𝐜𝐡 𝐝𝐚𝐲. 𝐒𝐨𝐦𝐞𝐭𝐢𝐦𝐞𝐬 𝐚𝐧 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐦𝐚𝐲 𝐡𝐚𝐯𝐞 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐞𝐧𝐭𝐫𝐢𝐞𝐬 
𝐟𝐨𝐫 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐝𝐚𝐲 (𝐞.𝐠., 𝐢𝐟 𝐭𝐡𝐞𝐲 𝐰𝐨𝐫𝐤𝐞𝐝 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐬𝐡𝐢𝐟𝐭𝐬).
*/

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE EmployeeHours (
    employee_id INT,
    employee_name VARCHAR(50),
    work_date DATE,
    hours_worked DECIMAL(4,2)
);

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO EmployeeHours (employee_id, employee_name, work_date, hours_worked) VALUES
(1, 'Alice', '2025-09-01', 8),(1, 'Alice', '2025-09-01', 2),
(1, 'Alice', '2025-09-02', 9),(2, 'Bob', '2025-09-01', 7.5),
(2, 'Bob', '2025-09-01', 1),(2, 'Bob', '2025-09-02', 8),
(3, 'Charlie', '2025-09-01', 6),(3, 'Charlie', '2025-09-02', 8),
(3, 'Charlie', '2025-09-03', 7.5),(4, 'David', '2025-09-01', 8),
(4, 'David', '2025-09-02', 8),(4, 'David', '2025-09-03', 8),
(5, 'Eva', '2025-09-01', 7),(5, 'Eva', '2025-09-02', 8),
(5, 'Eva', '2025-09-03', 9);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------+------------+-------------+
| 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝 | 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐧𝐚𝐦𝐞 | 𝐰𝐨𝐫𝐤_𝐝𝐚𝐭𝐞  | 𝐭𝐨𝐭𝐚𝐥_𝐡𝐨𝐮𝐫𝐬 |
+-------------+---------------+------------+-------------+
| 1           | Alice         | 2025-09-01 | 10.00       |
| 1           | Alice         | 2025-09-02 |  9.00       |
| 2           | Bob           | 2025-09-01 |  8.50       |
| 2           | Bob           | 2025-09-02 |  8.00       |
| 3           | Charlie       | 2025-09-01 |  6.00       |
| 3           | Charlie       | 2025-09-02 |  8.00       |
| 3           | Charlie       | 2025-09-03 |  7.50       |
| 4           | David         | 2025-09-01 |  8.00       |
| 4           | David         | 2025-09-02 |  8.00       |
| 4           | David         | 2025-09-03 |  8.00       |
| 5           | Eva           | 2025-09-01 |  7.00       |
| 5           | Eva           | 2025-09-02 |  8.00       |
| 5           | Eva           | 2025-09-03 |  9.00       |
+-------------+---------------+------------+-------------+

-----------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝟑)
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐭𝐡𝐚𝐭 𝐬𝐭𝐨𝐫𝐞𝐬 𝐝𝐞𝐭𝐚𝐢𝐥𝐬 𝐨𝐟 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬. 
𝐄𝐚𝐜𝐡 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐦𝐚𝐲 𝐡𝐚𝐯𝐞 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐨𝐧 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐝𝐚𝐭𝐞𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐟𝐢𝐫𝐬𝐭 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞 𝐚𝐧𝐝 𝐚𝐦𝐨𝐮𝐧𝐭 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 
𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫.
*/

# 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Transactions (
    transaction_id INT,
    customer_id INT,
    customer_name VARCHAR(50),
    transaction_date DATE,
    amount DECIMAL(10,2)
);
 
# 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Transactions (transaction_id, customer_id, customer_name, transaction_date, amount) VALUES
(101, 1, 'Alice', '2025-09-01', 200.00),
(102, 1, 'Alice', '2025-09-05', 350.00),
(103, 1, 'Alice', '2025-09-10', 500.00),
(104, 2, 'Bob', '2025-09-02', 150.00),
(105, 2, 'Bob', '2025-09-06', 220.00),
(106, 2, 'Bob', '2025-09-09', 180.00),
(107, 3, 'Charlie', '2025-09-03', 300.00),
(108, 3, 'Charlie', '2025-09-04', 250.00),
(109, 3, 'Charlie', '2025-09-12', 400.00),
(110, 4, 'David', '2025-09-01', 100.00),
(111, 4, 'David', '2025-09-11', 450.00),
(112, 5, 'Eva', '2025-09-07', 600.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+----------------------+---------------------+
| 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 | 𝐟𝐢𝐫𝐬𝐭_𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧_𝐝𝐚𝐭𝐞 | 𝐥𝐚𝐬𝐭_𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧_𝐝𝐚𝐭𝐞 |
+-------------+----------------------+---------------------+
| 1           | 2025-09-01           | 2025-09-10          |
| 2           | 2025-09-02           | 2025-09-09          |
| 3           | 2025-09-03           | 2025-09-12          |
| 4           | 2025-09-01           | 2025-09-11          |
| 5           | 2025-09-07           | 2025-09-07          |
+-------------+----------------------+---------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐒𝐚𝐥𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐬𝐚𝐥𝐞𝐬 𝐝𝐚𝐭𝐚 𝐚𝐜𝐫𝐨𝐬𝐬 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐫𝐞𝐠𝐢𝐨𝐧𝐬.
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐚𝐧𝐤 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐛𝐲 𝐭𝐨𝐭𝐚𝐥 𝐬𝐚𝐥𝐞𝐬 𝐚𝐦𝐨𝐮𝐧𝐭 𝐰𝐢𝐭𝐡𝐢𝐧 𝐞𝐚𝐜𝐡 𝐫𝐞𝐠𝐢𝐨𝐧. 
𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐞𝐬 𝐚𝐦𝐨𝐮𝐧𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐫𝐞𝐜𝐞𝐢𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐫𝐚𝐧𝐤
*/

#  𝐒𝐚𝐥𝐞𝐬_𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE Sales_records (
    sale_id INT,
    region VARCHAR(50),
    product_name VARCHAR(50),
    sales_amount DECIMAL(10,2)
);

#  𝐒𝐚𝐥𝐞𝐬_𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚:-
INSERT INTO Sales_records (sale_id, region, product_name, sales_amount) VALUES
(1, 'North', 'Laptop', 1200.00),(2, 'North', 'Laptop', 800.00),
(3, 'North', 'Mouse', 150.00),(4, 'North', 'Keyboard', 200.00),
(5, 'North', 'Mouse', 100.00),(6, 'South', 'Laptop', 1000.00),
(7, 'South', 'Mouse', 200.00),(8, 'South', 'Keyboard', 300.00),
(9, 'South', 'Keyboard', 200.00),(10, 'East', 'Laptop', 900.00),
(11, 'East', 'Mouse', 250.00),(12, 'East', 'Keyboard', 150.00),
(13, 'West', 'Laptop', 1100.00),(14, 'West', 'Mouse', 300.00),
(15, 'West', 'Keyboard', 500.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+--------------+-------------+-----------+
| 𝐫𝐞𝐠𝐢𝐨𝐧 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐭𝐨𝐭𝐚𝐥_𝐬𝐚𝐥𝐞𝐬 | 𝐬𝐚𝐥𝐞𝐬_𝐫𝐧𝐤   |
+--------+--------------+-------------+-----------+
| East   | Laptop       |      900.00 |         1 |
| East   | Mouse        |      250.00 |         2 |
| East   | Keyboard     |      150.00 |         3 |
| North  | Laptop       |     2000.00 |         1 |
| North  | Mouse        |      250.00 |         2 |
| North  | Keyboard     |      200.00 |         3 |
| South  | Laptop       |     1000.00 |         1 |
| South  | Keyboard     |      500.00 |         2 |
| South  | Mouse        |      200.00 |         3 |
| West   | Laptop       |     1100.00 |         1 |
| West   | Keyboard     |      500.00 |         2 |
| West   | Mouse        |      300.00 |         3 |
+--------+--------------+-------------+-----------+

--------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐝𝐞𝐭𝐚𝐢𝐥𝐬. 
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐬𝐞𝐜𝐨𝐧𝐝 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐬𝐚𝐥𝐚𝐫𝐲.
*/

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞;- 
CREATE TABLE Employees (
    emp_id INT,
    emp_name VARCHAR(50),
    salary DECIMAL(10,2)
);

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚;- 
INSERT INTO Employees (emp_id, emp_name, salary) VALUES
(1, 'Alice', 60000),
(2, 'Bob', 75000),
(3, 'Charlie', 50000),
(4, 'David', 75000),
(5, 'Eva', 90000),
(6, 'Frank', 45000),
(7, 'Grace', 70000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+----------+-----------+
| 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝 | 𝐞𝐦𝐩_𝐧𝐚𝐦𝐞 |  𝐬𝐚𝐥𝐚𝐫𝐲   |
+-------------+----------+-----------+
| 2           | Bob      |  75000.00 |
| 4           | David    |  75000.00 |
+-------------+----------+-----------+

------------------------------------------------------------------------------------------------------------------------

## 📌 𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐒𝐚𝐥𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐬𝐚𝐥𝐞𝐬 𝐝𝐚𝐭𝐚. 
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 𝐜𝐨𝐧𝐭𝐫𝐢𝐛𝐮𝐭𝐢𝐨𝐧 𝐨𝐟 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐭𝐨 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐫𝐞𝐯𝐞𝐧𝐮𝐞.
*/

# 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Sales_details (
    product_id INT,
    product_name VARCHAR(50),
    revenue DECIMAL(10,2)
);

# 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Sales_details (product_id, product_name, revenue) VALUES
(1, 'Laptop', 50000),
(2, 'Smartphone', 30000),
(3, 'Tablet', 15000),
(4, 'Headphones', 5000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------------+-------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐩𝐞𝐫𝐜  |
+------------+--------------+-------+
| 1          | Laptop       | 50.00 |
| 2          | Smartphone   | 30.00 |
| 3          | Tablet       | 15.00 |
| 4          | Headphones   |  5.00 |
+------------+--------------+-------+

----------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐒𝐚𝐥𝐞𝐬 𝐭𝐡𝐚𝐭 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐦𝐨𝐧𝐭𝐡𝐥𝐲 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭.
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐌𝐨𝐧𝐭𝐡-𝐨𝐯𝐞𝐫-𝐌𝐨𝐧𝐭𝐡 (𝐌𝐨𝐌) 𝐆𝐫𝐨𝐰𝐭𝐡 𝐏𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭.
*/

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE ProductSales (
    product_id INT,
    product_name VARCHAR(50),
    sales_month DATE,
    revenue DECIMAL(10,2)
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO ProductSales (product_id, product_name, sales_month, revenue) VALUES
(1, 'Laptop', '2025-01-01', 40000),
(1, 'Laptop', '2025-02-01', 50000),
(1, 'Laptop', '2025-03-01', 55000),
(2, 'Smartphone', '2025-01-01', 30000),
(2, 'Smartphone', '2025-02-01', 28000),
(2, 'Smartphone', '2025-03-01', 35000),
(3, 'Tablet', '2025-01-01', 15000),
(3, 'Tablet', '2025-02-01', 18000),
(3, 'Tablet', '2025-03-01', 20000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------------+-------+----------+---------------------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐦𝐨𝐧𝐭𝐡 | 𝐫𝐞𝐯𝐞𝐧𝐮𝐞  | 𝐦𝐨𝐦_𝐠𝐫𝐨𝐰𝐭𝐡_𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 |
+--------------+-------+----------+---------------------+
| Laptop       | 1     | 40000.00 |  0.00              |
| Laptop       | 2     | 50000.00 | 25.00              |
| Laptop       | 3     | 55000.00 | 10.00              |
| Smartphone   | 1     | 30000.00 |  0.00              |
| Smartphone   | 2     | 28000.00 | -6.67              |
| Smartphone   | 3     | 35000.00 | 25.00              |
| Tablet       | 1     | 15000.00 |  0.00              |
| Tablet       | 2     | 18000.00 | 20.00              |
| Tablet       | 3     | 20000.00 | 11.11              |
+--------------+-------+----------+---------------------+

--------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟖) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐡𝐚𝐭 𝐬𝐭𝐨𝐫𝐞𝐬 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐫𝐞𝐜𝐨𝐫𝐝𝐬.
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐚𝐥𝐥 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐦𝐚𝐝𝐞 𝐚𝐭 𝐥𝐞𝐚𝐬𝐭 𝐨𝐧𝐞 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐢𝐧 
𝐞𝐯𝐞𝐫𝐲 𝐪𝐮𝐚𝐫𝐭𝐞𝐫 (𝐐𝟏, 𝐐𝟐, 𝐐𝟑, 𝐐𝟒) 𝐨𝐟 𝐭𝐡𝐞 𝐲𝐞𝐚𝐫.
*/

# 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE CustomerPurchases (
    customer_id INT,
    customer_name VARCHAR(50),
    purchase_date DATE,
    amount DECIMAL(10,2)
);

# 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO CustomerPurchases (customer_id, customer_name, purchase_date, amount) VALUES
(1, 'Alice', '2025-01-15', 200),(1, 'Alice', '2025-04-20', 300),
(1, 'Alice', '2025-07-10', 400),(1, 'Alice', '2025-10-05', 500),
(2, 'Bob', '2025-02-10', 150),(2, 'Bob', '2025-05-25', 200),
(2, 'Bob', '2025-08-15', 250),(3, 'Charlie', '2025-03-05', 100),
(3, 'Charlie', '2025-06-10', 150),(3, 'Charlie', '2025-09-20', 200),
(3, 'Charlie', '2025-12-15', 250),(4, 'David', '2025-01-12', 80),
(4, 'David', '2025-03-30', 120),(5, 'Eva', '2025-04-18', 300),
(5, 'Eva', '2025-10-25', 400);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------------+
| 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐧𝐚𝐦𝐞 |
+---------------+
| Alice         |
| Charlie       |
+---------------+

-------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟗) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐒𝐚𝐥𝐞𝐬 𝐭𝐡𝐚𝐭 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐝𝐚𝐢𝐥𝐲 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞:

- 𝐂𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐨𝐯𝐞𝐫 𝐭𝐢𝐦𝐞.

- 𝐂𝐨𝐦𝐩𝐚𝐫𝐞 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐬𝐚𝐥𝐞𝐬 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐬𝐚𝐥𝐞𝐬 𝐚𝐜𝐫𝐨𝐬𝐬 𝐚𝐥𝐥 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬
𝐨𝐧 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐝𝐚𝐭𝐞.
*/

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Product_Sales (
    product_id INT,
    product_name VARCHAR(50),
    sales_date DATE,
    revenue DECIMAL(10,2)
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Product_Sales (product_id, product_name, sales_date, revenue) VALUES
(1, 'Laptop', '2025-01-01', 10000),
(1, 'Laptop', '2025-01-02', 12000),
(1, 'Laptop', '2025-01-03', 15000),
(2, 'Smartphone', '2025-01-01', 8000),
(2, 'Smartphone', '2025-01-02', 9000),
(2, 'Smartphone', '2025-01-03', 11000),
(3, 'Tablet', '2025-01-01', 5000),
(3, 'Tablet', '2025-01-02', 7000),
(3, 'Tablet', '2025-01-03', 8000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------------+---------+----------------+------------------------+
|  𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 | 𝐜𝐨𝐦𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞_𝐬𝐚𝐥𝐞𝐬 | 𝐚𝐯𝐠_𝐜𝐨𝐦𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞_𝐬𝐚𝐥𝐞𝐬  |
+------------+--------------+---------+----------------+------------------------+
| 1          | Laptop       | 10000.00 | 10000.00       | 10000.000000          |
| 1          | Laptop       | 12000.00 | 22000.00       | 11000.000000          |
| 1          | Laptop       | 15000.00 | 37000.00       | 12333.333333          |
| 2          | Smartphone   |  8000.00 |  8000.00       |  8000.000000          |
| 2          | Smartphone   |  9000.00 | 17000.00       |  8500.000000          |
| 2          | Smartphone   | 11000.00 | 28000.00       |  9333.333333          |
| 3          | Tablet       |  5000.00 |  5000.00       |  5000.000000          |
| 3          | Tablet       |  7000.00 | 12000.00       |  6000.000000          |
| 3          | Tablet       |  8000.00 | 20000.00       |  6666.666666          |
+------------+--------------+---------+----------------+------------------------+

------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟎) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐡𝐚𝐭 𝐬𝐭𝐨𝐫𝐞𝐬 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐫𝐞𝐜𝐨𝐫𝐝𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐚𝐥𝐥 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐦𝐚𝐝𝐞 𝐦𝐨𝐫𝐞 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐡𝐢𝐬
𝐦𝐨𝐧𝐭𝐡 𝐜𝐨𝐦𝐩𝐚𝐫𝐞𝐝 𝐭𝐨 𝐭𝐡𝐞 𝐩𝐫𝐞𝐯𝐢𝐨𝐮𝐬 𝐦𝐨𝐧𝐭𝐡.
*/

# 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Customer_Purchases (
    customer_id INT,
    customer_name VARCHAR(50),
    purchase_date DATE
);

# 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Customer_Purchases (customer_id, customer_name, purchase_date) VALUES
(1, 'Alice', '2025-08-05'),
(1, 'Alice', '2025-08-15'),
(1, 'Alice', '2025-09-02'),
(1, 'Alice', '2025-09-10'),
(1, 'Alice', '2025-09-20'),
(2, 'Bob', '2025-08-12'),
(2, 'Bob', '2025-08-25'),
(2, 'Bob', '2025-09-05'),
(3, 'Charlie', '2025-08-01'),
(3, 'Charlie', '2025-08-20'),
(3, 'Charlie', '2025-09-15'),
(3, 'Charlie', '2025-09-18');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------+-------+----------------+----------------+
| 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 | 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐧𝐚𝐦𝐞 | 𝐦𝐨𝐧𝐭𝐡 | 𝐜𝐮𝐫𝐫𝐞𝐧𝐭_𝐦𝐧𝐭_𝐜𝐧𝐭 | 𝐩𝐫𝐞𝐯𝐢𝐨𝐮𝐬_𝐦𝐧𝐭_𝐜𝐧𝐭 |
+-------------+---------------+-------+----------------+----------------+
| 1           | Alice         | 9     | 3              | 2              |
+-------------+---------------+-------+----------------+----------------+

---------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭


/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐝𝐞𝐭𝐚𝐢𝐥𝐬.
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐞𝐱𝐩𝐞𝐧𝐬𝐢𝐯𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭(𝐬) 𝐢𝐧 𝐞𝐚𝐜𝐡 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲.
𝐈𝐟 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐦𝐚𝐱𝐢𝐦𝐮𝐦 𝐩𝐫𝐢𝐜𝐞 𝐢𝐧 𝐚 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲, 𝐫𝐞𝐭𝐮𝐫𝐧 𝐚𝐥𝐥 𝐨𝐟 𝐭𝐡𝐞𝐦.
*/

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Products (
    product_id INT,
    product_name VARCHAR(50),
    category VARCHAR(50),
    price DECIMAL(10,2)
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Products (product_id, product_name, category, price) VALUES
(1, 'Laptop A', 'Electronics', 80000),
(2, 'Laptop B', 'Electronics', 90000),
(3, 'Smartphone A', 'Electronics', 90000),
(4, 'Tablet A', 'Electronics', 60000),
(5, 'Chair A', 'Furniture', 5000),
(6, 'Chair B', 'Furniture', 7000),
(7, 'Sofa A', 'Furniture', 12000),
(8, 'Desk A', 'Furniture', 7000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------------+------------+----------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲   | 𝐩𝐫𝐢𝐜𝐞    |
+------------+--------------+------------+----------+
| 2          | Laptop B     | Electronics | 90000.00 |
| 3          | Smartphone A | Electronics | 90000.00 |
| 7          | Sofa A       | Furniture   | 12000.00 |
+------------+--------------+------------+----------+

----------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐒𝐚𝐥𝐞𝐬 𝐭𝐡𝐚𝐭 𝐬𝐭𝐨𝐫𝐞𝐬 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐬𝐚𝐥𝐞𝐬 𝐚𝐦𝐨𝐮𝐧𝐭𝐬 𝐚𝐜𝐫𝐨𝐬𝐬
𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐚𝐥𝐥 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐰𝐡𝐨𝐬𝐞 𝐬𝐚𝐥𝐞𝐬 𝐚𝐫𝐞 𝐬𝐭𝐫𝐢𝐜𝐭𝐥𝐲 𝐚𝐛𝐨𝐯𝐞 𝐭𝐡𝐞
𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐬𝐚𝐥𝐞𝐬 𝐨𝐟 𝐭𝐡𝐞𝐢𝐫 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲.
*/ 

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Product_Sales_records (
    product_id INT,
    product_name VARCHAR(50),
    category VARCHAR(50),
    sales_amount DECIMAL(10,2)
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Product_Sales_records (product_id, product_name, category, sales_amount) VALUES
(1, 'Laptop A', 'Electronics', 80000),
(2, 'Laptop B', 'Electronics', 95000),
(3, 'Tablet A', 'Electronics', 60000),
(4, 'Smartphone A', 'Electronics', 70000),
(5, 'Chair A', 'Furniture', 5000),
(6, 'Sofa A', 'Furniture', 15000),
(7, 'Table A', 'Furniture', 10000),
(8, 'Desk A', 'Furniture', 8000);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------------+------------+-------------+------------------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲   | 𝐬𝐚𝐥𝐞𝐬_𝐚𝐦𝐨𝐮𝐧𝐭 | 𝐚𝐯𝐠_𝐬𝐚𝐥𝐞𝐬_𝐚𝐦𝐨𝐮𝐧𝐭 |
+------------+--------------+------------+-------------+------------------+
| 1          | Laptop A     | Electronics | 80000.00    | 76250.000000     |
| 2          | Laptop B     | Electronics | 95000.00    | 76250.000000     |
| 6          | Sofa A       | Furniture   | 15000.00    |  9500.000000     |
| 7          | Table A      | Furniture   | 10000.00    |  9500.000000     |
+------------+--------------+------------+-------------+------------------+

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 
𝐚𝐜𝐫𝐨𝐬𝐬 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐫𝐞𝐠𝐢𝐨𝐧𝐬.
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐭𝐡𝐞 𝐓𝐨𝐩 𝟑 𝐦𝐨𝐬𝐭 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐝 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐢𝐧 𝐞𝐚𝐜𝐡 
𝐫𝐞𝐠𝐢𝐨𝐧 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧  𝐪𝐮𝐚𝐧𝐭𝐢𝐭𝐲).
𝐈𝐟 𝐭𝐡𝐞𝐫𝐞 𝐚𝐫𝐞 𝐭𝐢𝐞𝐬, 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐚𝐥𝐥 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐫𝐚𝐧𝐤.
*/

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE ProductPurchases (
    purchase_id INT,
    region VARCHAR(50),
    product_name VARCHAR(50),
    quantity INT
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO ProductPurchases (purchase_id, region, product_name, quantity) VALUES
(1, 'North', 'Laptop', 120),
(2, 'North', 'Tablet', 90),
(3, 'North', 'Smartphone', 150),
(4, 'North', 'Headphones', 85),
(5, 'North', 'Keyboard', 70),
(6, 'South', 'Laptop', 200),
(7, 'South', 'Tablet', 180),
(8, 'South', 'Smartphone', 250),
(9, 'South', 'Headphones', 190),
(10, 'South', 'Keyboard', 100);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------+--------------+----------+
|  𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝 | 𝐫𝐞𝐠𝐢𝐨𝐧 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐪𝐮𝐚𝐧𝐭𝐢𝐭𝐲 |
+------------+--------+--------------+----------+
| 3          | North  | Smartphone   | 150      |
| 1          | North  | Laptop       | 120      |
| 2          | North  | Tablet       |  90      |
| 8          | South  | Smartphone   | 250      |
| 6          | South  | Laptop       | 200      |
| 9          | South  | Headphones   | 190      |
+------------+--------+--------------+----------+

--------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐇𝐨𝐮𝐫𝐬 𝐭𝐡𝐚𝐭 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐬 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐡𝐨𝐮𝐫𝐬 𝐰𝐨𝐫𝐤𝐞𝐝 
𝐛𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐨𝐧 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐝𝐚𝐭𝐞𝐬.
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐰𝐨𝐫𝐤𝐞𝐝 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝟏𝟔𝟎 𝐡𝐨𝐮𝐫𝐬 𝐢𝐧 𝐚 𝐦𝐨𝐧𝐭𝐡.
*/

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞;- 
CREATE TABLE Employee_Hours (
    employee_id INT,
    employee_name VARCHAR(50),
    work_date DATE,
    hours_worked INT
);

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚;- 
INSERT INTO Employee_Hours (employee_id, employee_name, work_date, hours_worked) VALUES
-- Alice works regularly ~9 hours/day (20 days)
(1, 'Alice', '2025-09-01', 9),
(1, 'Alice', '2025-09-02', 9),
(1, 'Alice', '2025-09-03', 9),
(1, 'Alice', '2025-09-04', 9),
(1, 'Alice', '2025-09-05', 9),
(1, 'Alice', '2025-09-08', 9),
(1, 'Alice', '2025-09-09', 9),
(1, 'Alice', '2025-09-10', 9),
(1, 'Alice', '2025-09-11', 9),
(1, 'Alice', '2025-09-12', 9),
(1, 'Alice', '2025-09-15', 9),
(1, 'Alice', '2025-09-16', 9),
(1, 'Alice', '2025-09-17', 9),
(1, 'Alice', '2025-09-18', 9),
(1, 'Alice', '2025-09-19', 9),
(1, 'Alice', '2025-09-22', 9),
(1, 'Alice', '2025-09-23', 9),
(1, 'Alice', '2025-09-24', 9),
(1, 'Alice', '2025-09-25', 9),
(1, 'Alice', '2025-09-26', 9),
(2, 'Bob', '2025-09-01', 6),
(2, 'Bob', '2025-09-02', 6),
(2, 'Bob', '2025-09-03', 6),
(2, 'Bob', '2025-09-04', 6),
(2, 'Bob', '2025-09-05', 6),
(2, 'Bob', '2025-09-08', 6),
(2, 'Bob', '2025-09-09', 6),
(2, 'Bob', '2025-09-10', 6),
(2, 'Bob', '2025-09-11', 6),
(2, 'Bob', '2025-09-12', 6),
(2, 'Bob', '2025-09-15', 6),
(2, 'Bob', '2025-09-16', 6),
(2, 'Bob', '2025-09-17', 6),
(2, 'Bob', '2025-09-18', 6),
(2, 'Bob', '2025-09-19', 6),
(3, 'Charlie', '2025-09-01', 10),
(3, 'Charlie', '2025-09-02', 10),
(3, 'Charlie', '2025-09-03', 10),
(3, 'Charlie', '2025-09-04', 10),
(3, 'Charlie', '2025-09-05', 10),
(3, 'Charlie', '2025-09-08', 10),
(3, 'Charlie', '2025-09-09', 10),
(3, 'Charlie', '2025-09-10', 10),
(3, 'Charlie', '2025-09-11', 10),
(3, 'Charlie', '2025-09-12', 10),
(3, 'Charlie', '2025-09-15', 10),
(3, 'Charlie', '2025-09-16', 10),
(3, 'Charlie', '2025-09-17', 10),
(3, 'Charlie', '2025-09-18', 10),
(3, 'Charlie', '2025-09-19', 10),
(3, 'Charlie', '2025-09-22', 10),
(3, 'Charlie', '2025-09-23', 10),
(3, 'Charlie', '2025-09-24', 10);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------+-------+------------+
| 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝 | 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐧𝐚𝐦𝐞 | 𝐦𝐨𝐧𝐭𝐡 | 𝐭𝐨𝐭𝐚𝐥_𝐡𝐨𝐮𝐫𝐬 |
+-------------+---------------+-------+------------+
| 1           | Alice         | 9     | 180        |
| 3           | Charlie       | 9     | 180        |
+-------------+---------------+-------+------------+

----------------------------------------------------------------------------------------------------------------------------------------


## 📌 𝟏𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐇𝐨𝐮𝐫𝐬 𝐭𝐡𝐚𝐭 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐡𝐨𝐮𝐫𝐬 𝐞𝐚𝐜𝐡 
𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐰𝐨𝐫𝐤𝐞𝐝 𝐨𝐧 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐝𝐚𝐭𝐞𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐝𝐢𝐝 𝐧𝐨𝐭 𝐰𝐨𝐫𝐤 𝐨𝐧 𝐜𝐞𝐫𝐭𝐚𝐢𝐧 𝐫𝐞𝐪𝐮𝐢𝐫𝐞𝐝 
𝐰𝐨𝐫𝐤𝐝𝐚𝐲𝐬 (𝐟𝐨𝐫 𝐞𝐱𝐚𝐦𝐩𝐥𝐞: 𝟐𝟎𝟐𝟓-𝟎𝟗-𝟎𝟏 𝐚𝐧𝐝 𝟐𝟎𝟐𝟓-𝟎𝟗-𝟎𝟐).
*/

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞;- 
CREATE TABLE Employee_Hours_data (
    employee_id INT,
    employee_name VARCHAR(50),
    work_date DATE,
    hours_worked INT
);

# 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚;- 
INSERT INTO Employee_Hours_data (employee_id, employee_name, work_date, hours_worked) VALUES
(1, 'Alice', '2025-09-01', 8),
(1, 'Alice', '2025-09-02', 8),
(1, 'Alice', '2025-09-03', 8),
(2, 'Bob', '2025-09-01', 8),
(2, 'Bob', '2025-09-03', 8),
(3, 'Charlie', '2025-09-02', 8),
(3, 'Charlie', '2025-09-03', 8);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------+
| 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝 | 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐧𝐚𝐦𝐞 |
+-------------+---------------+
| 3           | Charlie       |
| 2           | Bob           |
+-------------+---------------+

----------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐒𝐚𝐥𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐬𝐚𝐥𝐞𝐬 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 
𝐚𝐜𝐫𝐨𝐬𝐬 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐫𝐞𝐠𝐢𝐨𝐧𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐦𝐚𝐱𝐢𝐦𝐮𝐦 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐢𝐧 𝐞𝐚𝐜𝐡 𝐫𝐞𝐠𝐢𝐨𝐧.

𝐈𝐟 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐦𝐚𝐱𝐢𝐦𝐮𝐦 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐢𝐧 𝐚 𝐫𝐞𝐠𝐢𝐨𝐧, 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐚𝐥𝐥 𝐨𝐟 𝐭𝐡𝐞𝐦.

𝐓𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐫𝐞𝐠𝐢𝐨𝐧, 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐧𝐚𝐦𝐞, 𝐚𝐧𝐝 𝐫𝐞𝐯𝐞𝐧𝐮𝐞.
*/

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Product_Sales_data (
    region VARCHAR(50),
    product_name VARCHAR(50),
    revenue INT
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Product_Sales_data (region, product_name, revenue) VALUES
('North', 'Laptop', 80000),
('North', 'Tablet', 60000),
('North', 'Smartphone', 95000),
('North', 'Headphones', 95000),
('South', 'Laptop', 200000),
('South', 'Tablet', 180000),
('South', 'Smartphone', 250000),
('South', 'Headphones', 250000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+--------------+---------+
| 𝐫𝐞𝐠𝐢𝐨𝐧 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 |
+--------+--------------+---------+
| North  | Smartphone   |  95000  |
| North  | Headphones   |  95000  |
| South  | Smartphone   | 250000  |
| South  | Headphones   | 250000  |
+--------+--------------+---------+

-------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭


/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐒𝐚𝐥𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐬𝐚𝐥𝐞𝐬 𝐝𝐚𝐭𝐚.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐬𝐚𝐥𝐞𝐬 𝐩𝐞𝐫 𝐦𝐨𝐧𝐭𝐡 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭.

- 𝐓𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞: 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞, 𝐦𝐨𝐧𝐭𝐡, 𝐭𝐨𝐭𝐚𝐥_𝐬𝐚𝐥𝐞𝐬.

- 𝐌𝐨𝐧𝐭𝐡 𝐜𝐚𝐧 𝐛𝐞 𝐞𝐱𝐭𝐫𝐚𝐜𝐭𝐞𝐝 𝐟𝐫𝐨𝐦 𝐭𝐡𝐞 𝐬𝐚𝐥𝐞𝐬 𝐝𝐚𝐭𝐞.
*/

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE Product_Sales_records_ (
    product_id INT,
    product_name VARCHAR(50),
    sale_date DATE,
    sales_amount INT
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Product_Sales_records_ (product_id, product_name, sale_date, sales_amount) VALUES
(1, 'Laptop', '2025-09-01', 5000),
(1, 'Laptop', '2025-09-05', 7000),
(1, 'Laptop', '2025-10-01', 6000),
(2, 'Tablet', '2025-09-03', 3000),
(2, 'Tablet', '2025-09-20', 4000),
(2, 'Tablet', '2025-10-02', 3500),
(3, 'Smartphone', '2025-09-10', 8000),
(3, 'Smartphone', '2025-09-25', 9000),
(3, 'Smartphone', '2025-10-03', 9500);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------------+-------+------------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐦𝐨𝐧𝐭𝐡 | 𝐭𝐨𝐭𝐚𝐥_𝐬𝐚𝐥𝐞𝐬 |
+--------------+-------+------------+
| Laptop       | 9     | 12000      |
| Laptop       | 10    |  6000      |
| Smartphone   | 9     | 17000      |
| Smartphone   | 10    |  9500      |
| Tablet       | 9     |  7000      |
| Tablet       | 10    |  3500      |
+--------------+-------+------------+

---------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟖) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE Product_Sales_records__ (
    product_id INT,
    product_name VARCHAR(50),
    sale_date DATE,
    sales_amount INT
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Product_Sales_records__ (product_id, product_name, sale_date, sales_amount) VALUES
(1, 'Laptop', '2025-09-01', 5000),
(1, 'Laptop', '2025-09-05', 7000),
(1, 'Laptop', '2025-10-01', 6000),
(2, 'Tablet', '2025-09-03', 3000),
(2, 'Tablet', '2025-09-20', 4000),
(2, 'Tablet', '2025-10-02', 3500),
(3, 'Smartphone', '2025-09-10', 8000),
(3, 'Smartphone', '2025-09-25', 9000),
(3, 'Smartphone', '2025-10-03', 9500);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------------+-------+----------------+-------------------+------------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐦𝐨𝐧𝐭𝐡 | 𝐜𝐮𝐫𝐫𝐞𝐧𝐭_𝐦𝐧𝐭_𝐬𝐚𝐥𝐞𝐬 | 𝐩𝐫𝐞𝐯𝐢𝐨𝐮𝐬_𝐦𝐧𝐭_𝐬𝐚𝐥𝐞𝐬 | 𝐠𝐫𝐨𝐰𝐭𝐡_𝐩𝐞𝐫𝐜 |
+--------------+-------+----------------+-------------------+------------+
| Laptop       | 9     | 12000          | NULL              |   0.00     |
| Laptop       | 10    | 6000           | 12000             | -50.00     |
| Smartphone   | 9     | 17000          | NULL              |   0.00     |
| Smartphone   | 10    | 9500           | 17000             | -44.12     |
| Tablet       | 9     | 7000           | NULL              |   0.00     |
| Tablet       | 10    | 3500           | 7000              | -50.00     |
+--------------+-------+----------------+-------------------+------------+

--------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟗) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐡𝐚𝐭 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐦𝐚𝐝𝐞 𝐛𝐲 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐚𝐜𝐭𝐢𝐯𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫(𝐬) 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬.

- 𝐈𝐟 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐜𝐨𝐮𝐧𝐭, 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐚𝐥𝐥 𝐨𝐟 𝐭𝐡𝐞𝐦.

- 𝐓𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝, 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐧𝐚𝐦𝐞, 𝐚𝐧𝐝 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞_𝐜𝐨𝐮𝐧𝐭.
*/

# 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE CustomerPurchases_ (
    customer_id INT,
    customer_name VARCHAR(50),
    purchase_id INT,
    purchase_date DATE,
    amount DECIMAL(10,2)
);

# 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO CustomerPurchases_ (customer_id, customer_name, purchase_id, purchase_date, amount) VALUES
(1, 'Alice', 101, '2025-09-01', 500),
(1, 'Alice', 102, '2025-09-05', 700),
(2, 'Bob', 103, '2025-09-01', 300),
(2, 'Bob', 104, '2025-09-03', 400),
(2, 'Bob', 105, '2025-09-05', 200),
(3, 'Charlie', 106, '2025-09-02', 600),
(3, 'Charlie', 107, '2025-09-04', 800);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------+----------------+
| 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 | 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐧𝐚𝐦𝐞 | 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞_𝐜𝐨𝐮𝐧𝐭 |
+-------------+---------------+----------------+
| 2           | Bob           | 3              |
+-------------+---------------+----------------+

----------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟎) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐒𝐚𝐥𝐞𝐬 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐬𝐚𝐥𝐞𝐬 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞:

- 𝐓𝐨𝐭𝐚𝐥 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐩𝐞𝐫 𝐩𝐫𝐨𝐝𝐮𝐜𝐭.

- 𝐓𝐨𝐭𝐚𝐥 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐬𝐚𝐥𝐞𝐬 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐩𝐞𝐫 𝐩𝐫𝐨𝐝𝐮𝐜𝐭.

𝐓𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞: 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝, 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞, 𝐭𝐨𝐭𝐚𝐥_𝐫𝐞𝐯𝐞𝐧𝐮𝐞, 𝐭𝐨𝐭𝐚𝐥_𝐬𝐚𝐥𝐞𝐬_𝐜𝐨𝐮𝐧𝐭.
*/

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE Products_Sales_data (
    product_id INT,
    product_name VARCHAR(50),
    sale_id INT,
    sale_date DATE,
    revenue DECIMAL(10,2)
);

# 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Products_Sales_data (product_id, product_name, sale_id, sale_date, revenue) VALUES
(1, 'Laptop', 101, '2025-09-01', 5000),
(1, 'Laptop', 102, '2025-09-05', 7000),
(1, 'Laptop', 103, '2025-09-10', 6000),
(2, 'Tablet', 104, '2025-09-03', 3000),
(2, 'Tablet', 105, '2025-09-20', 4000),
(3, 'Smartphone', 106, '2025-09-10', 8000),
(3, 'Smartphone', 107, '2025-09-25', 9000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------------+------------+----------------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐧𝐚𝐦𝐞 | 𝐭𝐨𝐭𝐚𝐥_𝐬𝐚𝐥𝐞𝐬 | 𝐭𝐨𝐭𝐚𝐥_𝐬𝐚𝐥𝐞𝐬_𝐜𝐧𝐭 |
+------------+--------------+------------+----------------+
| 1          | Laptop       | 18000.00   | 3              |
| 2          | Tablet       |  7000.00   | 2              |
| 3          | Smartphone   | 17000.00   | 2              |
+------------+--------------+------------+----------------+

-------------------------------------------------------------------------------------------------------------------------------
